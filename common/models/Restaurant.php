<?php

namespace common\models;

use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the model class for table "restaurant".
 * TODO Note - all tables without FK
 * TODO need table Options
 * TODO contacts - JSON field
 *
 * @property int $id
 * @property string $title
 * @property string $logo
 * @property string $desc
 * @property int $has_lunch
 * @property int $has_menu
 * @property int $has_alko
 * @property int $has_sportmenu
 * @property int $has_healthmenu
 * @property int $has_delivery
 * @property int $type
 * @property int $deleted_ts
 * @property int $created_ts
 * @property int $price_category
 * @property int $updated_ts
 * @property string $lnglat
 * @property string $geohash
 * @property array $url
 * @property string $lat
 * @property string $lng
 * @property string $address
 */
class Restaurant extends \yii\db\ActiveRecord
{

    public $lat;
    public $lng;
    public $reCaptcha;

    const STATUS_DELETED = 0;
    const STATUS_NOT_MODERATION = 1;
    const STATUS_UNDER_MODERATION = 3;
    const STATUS_BLOCKED_SPAM = 5;
    const STATUS_BLOCKED_ANGRY = 6;
    const STATUS_BLOCKED_SEX = 7;
    const STATUS_ACTIVE = 10;
    const DEFAULT_STATUS = self::STATUS_ACTIVE;

    static function find()
    {
        $field = 'lnglat';
        $query =  parent::find(); // TODO: Change the autogenerated stub
        $query->addSelect(['*',"ST_AsText($field) AS $field"]);
        return $query;
    }

    static $_price_category = [
        1 => '$',
        2 => '$$',
        3 => '$$$',
        4 => '$$$$',
        5 => '$$$$$',
    ];

    static $_type = [
        1 => 'Кафе',
        2 => 'Ресторан'

    ];
    static $_status = [
        self::STATUS_ACTIVE => 'active',
        self::STATUS_NOT_MODERATION => 'moderate fail',
        self::STATUS_UNDER_MODERATION => 'under moderation',

    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'restaurant';
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'created_ts',
                    ActiveRecord::EVENT_BEFORE_UPDATE => 'updated_ts',
                    // ActiveRecord::EVENT_BEFORE_UPDATE => 'date_updated',
                ],
                'value' => function () {
                    return time(); //
                },
            ],

            'user_id' => [
                'class' => AttributeBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'user_id',
                    //  ActiveRecord::EVENT_BEFORE_UPDATE => 'updated_ts',
                    // ActiveRecord::EVENT_BEFORE_UPDATE => 'date_updated',
                ],
                'value' => function () {
                    return !Yii::$app->user->isGuest ? Yii::$app->user->id : null;
                }
            ],
            'status' => [
                'class' => AttributeBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'status',
                    //  ActiveRecord::EVENT_BEFORE_UPDATE => 'updated_ts',
                    // ActiveRecord::EVENT_BEFORE_UPDATE => 'date_updated',
                ],
                'value' => function () {
                    return self::DEFAULT_STATUS; //
                }
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {

        /*
         * TODO note, that params not filtering in saving.
         */
        return [
            [['title', 'lat', 'lng'], 'required'],
            [['type', 'has_lunch', 'has_menu', 'has_alko', 'has_sportmenu', 'has_healthmenu'], 'integer'],
//            [['place_location'], 'string'],
            [['title', 'address'], 'string', 'max' => 255],
            [['has_delivery'], 'boolean'],
            [['desc'], 'string', 'max' => 1000],
            ['price_category', 'in', 'range' => [1, 2, 3, 4, 5]],

//            [['geohash'], 'string', 'max' => 9],
            [['lat'], 'number', 'min' => -90, 'max' => 90, 'message' => 'Invalid Location'],
            [['lng'], 'number', 'min' => -180, 'max' => 180, 'message' => 'Invalid Location'],
//            [['reCaptcha'], \himiklab\yii2\recaptcha\ReCaptchaValidator3::className(),
////                'secret' => 'your secret key', // unnecessary if reСaptcha is already configured
//                'threshold' => 0.5,
//                'action' => 'homepage',
//            ],
        ];
    }

    public function getLocation()
    {

        $val = $this->lnglat;
        $exp = $val;
        if (preg_match('#\((.*?)\)#', $exp, $matches)) {
            $val = $matches[1];


            $val = explode(',',str_replace(' ', ',', $val));
            return [
                'lng'=>$val[0],
                'lat'=>$val[1],
            ];
        }
        return $val;

    }

    public function afterFind()
    {
        $location = $this->getLocation();
        $this->lng = $location['lng'];
        $this->lat = $location['lat'];
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function getUrl()
    {
        return ['/restaurants/view', 'id' => $this->id];
    }

    public function beforeSave($insert)
    {
//        $this->lnglat = "POINT($this->lng, $this->lat)";
        $this->lnglat = new Expression("ST_PointFromText('POINT($this->lng $this->lat)')");
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'logo' => 'Logo',
            'desc' => 'Описание',
            'price_category' => 'Ценовая категория',
            'has_lunch' => 'Бизнес ланч?',
            'has_menu' => 'Описано ли меню',
            'has_alko' => 'Алкоголь?',
            'has_sportmenu' => 'Спортменю?',
            'has_healthmenu' => 'Есть ли ПП?',

            'deleted_ts' => 'Deleted Ts',
            'created_ts' => 'Created Ts',
            'updated_ts' => 'Updated Ts',
            'lnglat' => 'Place Location',
            'geohash' => 'Geohash',
            'address' => 'Address',
        ];
    }
}
